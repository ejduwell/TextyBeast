#!/bin/bash

# Local bash function for calling data_scraping pipeline v1

# HEADER STUFF
# ====================================================
echo ""
echo "Starting at $(date)"
echo ""
echo "#########################################################################"
echo "#########################################################################"
echo "##                                                                     ##"
echo "##        ::::::::::::::::::::::::    :::::::::::::::::   :::          ##" 
echo "##           :+:    :+:       :+:    :+:    :+:    :+:   :+:           ##"  
echo "##          +:+    +:+        +:+  +:+     +:+     +:+ +:+             ##"    
echo "##         +#+    +#++:++#    +#++:+      +#+      +#++:               ##"      
echo "##        +#+    +#+        +#+  +#+     +#+       +#+                 ##"        
echo "##       #+#    #+#       #+#    #+#    #+#       #+#                  ##"         
echo "##      ###    #############    ###    ###       ###                   ##"          
echo "##            ::::::::: ::::::::::    :::     :::::::::::::::::::      ##" 
echo "##           :+:    :+::+:         :+: :+:  :+:    :+:   :+:           ##"      
echo "##          +:+    +:++:+        +:+   +:+ +:+          +:+            ##"       
echo "##         +#++:++#+ +#++:++#  +#++:++#++:+#++:++#++   +#+             ##"        
echo "##        +#+    +#++#+       +#+     +#+       +#+   +#+              ##"        
echo "##       #+#    #+##+#       #+#     #+##+#    #+#   #+#               ##"         
echo "##      ######### #############     ### ########    ###                ##"    
echo "##                                                                     ##"
echo "##                                                                     ##"
echo "#########################################################################"
echo "#########################################################################"
echo ""
# ====================================================

# PARAMETERS
# ====================================================
inDirClst="/scratch/g/tark/dataScraping/input"
inDirLoc=""
startDir=$(pwd)

#finSignal="$(jot -r 1 10000000 99999999)" #generate random number to for "finished" signal directory..
# Get local machine's global IP


# Detect MCW network external IP
# (NOTE: you will need to be either within MCW's network or VPN'd in to access the cluster)
#====================================
ipConfOut=$(ifconfig) # get the entirety of the ifconfig output

#Save the ifconfig output to a temporary file and then save the filename as a variable..
echo "$ipConfOut">ipConfOut_tmp.txt
filename=ipConfOut_tmp.txt

# create regular expression key that will match an MCW ip if present in ipConfOut..
# (basically any ip that starts with 141.106 ..)
key="141.106.[0-9][0-9][0-9].[0-9][0-9][0-9]" 

# grep the temporary file for the key above.. save all matches
grpMatches=$(grep -o "$key" "$filename")

# get the first match (characters 0-15)
echo "Detecting MCW network IP ..."
echo "Assigning match below to variable 'ipLocal' ...:"
echo ${grpMatches:0:15}
echo ""
ipLocal=${grpMatches:0:15}
#ipLocal=141.106.156.182
rm $filename
# ====================================================


# PROCESS INPUT ARGUMENTS
# ====================================================
# number of expected input arguments (must update if more are added in development):
nxArg=2

# Check that expected number of input args were provided.
# If so, echo the inputs onto the command line such that they are present in the
# log output:

if [ "$#" -lt "$nxArg" ];
then
  echo "$0: Missing arguments"
  exit 1
elif [ "$#" -gt "$nxArg" ];
then
  echo "$0: Too many arguments: $@"
  exit 1
else
  echo "Input Arguments:"
  echo "#########################################################################"
  echo "Number of arguments.: $#"
  echo "List of arguments...: $@"
  echo "Arg #1..............: $1 (Local Input Directory)"
  inDirLocal=$1
  #videoFile=$1
  echo "Arg #2..............: $2 (Local Output Directory)"
  dirLocal=$2
  #echo "Arg #3..............: $3"
  echo "#########################################################################"
  echo ""
fi

# Interactive Input Arguments:
# ------------------------------
# Ask the user for login details
echo "RCC Cluster Login Info:"
echo "#########################################################################"
echo "Please enter your RCC username/password below:"
read -p 'Username: ' uservar
read -sp 'Password: ' passvar
echo ""
echo ""
echo "Thank you, $uservar, we now have your login details..."
echo "These are not saved. We will use the login info to submit"
echo "your job to the RCC cluster.."
echo "#########################################################################"
echo ""
echo ""

echo "Login Info for Local Machine:"
echo "#########################################################################"
echo "Please enter the username/password for your local machine below:"
read -p 'Username: ' uservarLoc
read -sp 'Password: ' passvarLoc
echo ""
echo ""
echo "Thank you, $uservar, we now have your local login details..."
echo "These are not saved. We will use the login info to send you"
echo "your jobs outputs back to you from the RCC cluster.."
echo "#########################################################################"
echo ""
# ====================================================

#use sshpass/scp to push the data to the cluster..
echo "Pushing data in selected folder to the cluster .."
sshpass -p $passvar scp -r $inDirLocal/* $uservar@login-hpc.rcc.mcw.edu:$inDirClst/
echo "Data upload complete .."
echo ""

# Go to the local input directory and loop through all files inside.. 
cd $inDirLocal

cmd1="cd /scratch/g/tark/dataScraping;" #initialize command
echo "Submitting Each Video as a Separate Cluster Job:"
echo "------------------------------------------------"
for FILE in *
	    
do videoFile="$inDirClst/$FILE" #assign file to videoFile variable and add appropriate path for cluster location..
finSignal="$(jot -r 1 10000000 99999999)" #generate unique random number to for "finished" signal..
# Run Data Scraping Pipeline Command Via SSH
sshpass -p $passvar ssh -o StrictHostKeyChecking=no $uservar@login-hpc.rcc.mcw.edu  "sbatch /scratch/g/tark/dataScraping/textyBeast_v1.slurm $videoFile $uservarLoc $passvarLoc $ipLocal $dirLocal $finSignal"
# add onto data pull command string..
cmd1="$cmd1 ./sendData_v2 $uservarLoc $passvarLoc $ipLocal $dirLocal $finSignal $videoFile;"
done
echo "------------------------------------------------"
# Tell sendData_v2 to start monitoring for the finished signals..
echo ""
echo "Beginning to monitor for the signals that each job has finished .."
echo "Once signal is recieved, will begin downloading data to local directory .."
echo ""

sshpass -p $passvar ssh -o StrictHostKeyChecking=no $uservar@login-hpc.rcc.mcw.edu  $cmd1
#sshpass -p $passvar ssh -o  StrictHostKeyChecking=no $uservar@login-hpc.rcc.mcw.edu  "cd /scratch/g/tark/dataScraping; ./sendData_v2 $uservarLoc $passvarLoc $ipLocal $dirLocal $finSignal"

#go back to starting directory
cd $startDir

# Run Command Via SSH
#videoFile=/scratch/g/tark/dataScraping/input/test4_trimmed.mp4
#sshpass -p $passvar ssh -o  StrictHostKeyChecking=no $uservar@login-hpc.rcc.mcw.edu  "sbatch /scratch/g/tark/dataScraping/textyBeast_v1.slurm $videoFile $uservarLoc $passvarLoc $ipLocal $dirLocal $finSignal"

# Tell sendData_v2 to start monitoring for the finished signal..
#sshpass -p $passvar ssh -o  StrictHostKeyChecking=no $uservar@login-hpc.rcc.mcw.edu  "cd /scratch/g/tark/dataScraping; ./sendData_v2 $uservarLoc $passvarLoc $ipLocal $dirLocal $finSignal"
