#!/bin/bash

#data download script2

# Spit out job info..
echo "Starting at $(date)"
echo "Started Monitoring for Signal that Job has Completed ..."

echo ""
# ====================================================

# PROCESS INPUT ARGUMENTS
# ====================================================
# number of expected input arguments (must update if more are added in development):
nxArg=6

# Check that expected number of input args were provided.
# If so, echo the inputs onto the command line such that they are present in the
# log output:
echo "Parsing Input Arguments ..."
if [ "$#" -lt "$nxArg" ];
then
  echo "$0: Missing arguments ..."
  echo "only recieved $# ..."
  echo "expected $nxArg ..."
  exit 1
elif [ "$#" -gt "$nxArg" ];
then
  echo "$0: Too many arguments: $@"
  echo "recieved $# ..."
  echo "expected $nxArg ..."
  exit 1
else
  #echo "#########################################################################"
  echo "Recieved expected number of inputs .."
  echo "Number of arguments.: $#"
  #echo "List of arguments...: $@"
  unLocal=$1

  #ipLocal=$2
  dirLocal=$2
  finSignal=$3
  infileName=$4
  logFileName=$5
  remoteDir=$6
  #echo "#########################################################################"
fi
# ====================================================

#PARAMETERS
# ====================================================
outBase=$remoteDir/output #!!!!!!!!!

outFolder=$outBase/$finSignal
sig=$outBase/$finSignal/DONE
waitInt=15
# ====================================================

# WAIT FOR THE SIGNAL
# ====================================================
goSign=0 #initialize
echo ""
echo "Waiting $waitInt seconds to check for completion signal .."
while [ $goSign -eq 0 ]
do
  sleep $waitInt #sleep for x seconds each pass to limit number amount of cpu usage on user node..
  #above addition effectively limits checking to one time every x seconds..
  chkCmd="bash $remoteDir/checkJob $sig"
  chk=$(ssh $unLocal@login-hpc.rcc.mcw.edu $chkCmd)

  if [ "$chk" -gt 0 ];
  then  
      goSign=1
  else
      echo "Completion signal still not recieved. Waiting $waitInt more seconds to check again.."
  fi
done
# ====================================================

echo ""
echo "Recieved signal that job is complete .."
echo "Transfering the outputs from job to your local machine .."
echo ""

# SEND THE DATA FOLDER
# ====================================================
#use sshpass/scp to export the data back to the local machine..
#sshpass -p $pwLocal scp -r $outFolder/* $unLocal@$ipLocal:$dirLocal #orig..
echo "Waiting a moment to ensure cluster is finished..."
sleep 20
echo ""

#scp -r $unLocal@login-hpc.rcc.mcw.edu:$outFolder/* $dirLocal && break

max_retries=10
count=0
while true; do
    scp -r $unLocal@login-hpc.rcc.mcw.edu:$outFolder/* $dirLocal && break
    count=$((count+1))
    if [[ $count -ge $max_retries ]]; then
        echo "Command failed after $max_retries attempts. Exiting."
        exit 1
    fi
    sleep 5
done

# ====================================================
echo ""
echo "Transfer Complete .."
echo "Data saved locally in: $dirLocal"
echo ""

echo "Cleaning up/removing files from scratch directory on cluster.."
cmd1="rm $infileName"
cmd2="rm -rf $outFolder"
cmd3="rm $logFileName"

ssh $unLocal@login-hpc.rcc.mcw.edu $cmd2 #clean up .. remove output subdir from cluster

echo ""
echo "Finished."
