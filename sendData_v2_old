#!/bin/bash

#data download script2

# Spit out job info..
echo "Starting at $(date)"
echo "Started Monitoring for Signal that Job has Completed ..."

echo ""
# ====================================================

# PROCESS INPUT ARGUMENTS
# ====================================================
# number of expected input arguments (must update if more are added in development):
nxArg=6

# Check that expected number of input args were provided.
# If so, echo the inputs onto the command line such that they are present in the
# log output:
echo "Parsing Input Arguments ..."
if [ "$#" -lt "$nxArg" ];
then
  echo "$0: Missing arguments ..."
  echo "only recieved $# ..."
  echo "expected $nxArg ..."
  exit 1
elif [ "$#" -gt "$nxArg" ];
then
  echo "$0: Too many arguments: $@"
  echo "recieved $# ..."
  echo "expected $nxArg ..."
  exit 1
else
  #echo "#########################################################################"
  echo "Recieved expected number of inputs .."
  echo "Number of arguments.: $#"
  #echo "List of arguments...: $@"
  unLocal=$1
  pwLocal=$2
  ipLocal=$3
  dirLocal=$4
  finSignal=$5
  infileName=$6
  #echo "#########################################################################"
fi
# ====================================================

#PARAMETERS
# ====================================================
outBase=/scratch/g/tark/dataScraping/output
outFolder=$outBase/$finSignal
sig=$outBase/$finSignal/DONE
# ====================================================

# WAIT FOR THE SIGNAL
# ====================================================
goSign=0 #initialize
echo ""
echo "Waiting for completion signal .."
while [ $goSign -eq 0 ]
do
  sleep 30 #sleep for x seconds each pass to limit number amount of cpu usage on user node..
  #above addition effectively limits checking to one time every x seconds..
  if test -f "$sig"; then
    goSign=1
  fi
done
# ====================================================

echo ""
echo "Recieved signal that job is complete .."
echo "Transfering the outputs from job to your local machine .."
echo ""

# SEND THE DATA FOLDER
# ====================================================
#use sshpass/scp to export the data back to the local machine..
sshpass -p $pwLocal scp -r $outFolder/* $unLocal@$ipLocal:$dirLocal
rm $infileName #clean input file out of cluster input dir..
rm -rf $outFolder #clean up .. remove output subdir from cluster
# ====================================================
echo "Transfer Complete .."
echo "Data saved locally in: $dirLocal"
echo ""